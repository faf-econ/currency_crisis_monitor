filter(
year >= year_start,
year <= year_end,
code %in% (ierp %>%
filter(year == year_end,
month == 12) %>%
filter(code %in% country_target,
acc_cc != 0) %>%
.$code)
) %>%
# ggPlot
ggplot(., aes(x = date, y = erpi)) +
# Geoms:
geom_hline(yintercept = 0, color = "gray") +
geom_line(aes(group = code), color = "#014d64", size = .3) +
geom_line(aes(y = trigger, group = code), linetype = "dashed", color = "#01a2d9", size = .2) +
geom_point(aes(y = cc_plot), shape = 4, size = 2, color = "#00887d") +
geom_text(aes(y = 1.1*cc_plot, label = acc_cc_plot), size = 2.5, color = "#00887d") +
# Facets
facet_wrap(country~., scales = "free_y") +
# Axis
xlab("Time") +
scale_y_continuous(name = "ERPI and Trigger") +
# Theme:
theme_minimal() +
scale_color_economist() +
theme(legend.position = "none")
) %>%
# Plotly
ggplotly(tooltip = c("date", round("erpi", 2)))
(ierp %>%
filter(
year >= year_start,
year <= year_end,
code %in% (ierp %>%
filter(year == year_end,
month == 12) %>%
filter(code %in% country_target,
acc_cc != 0) %>%
.$code)
) %>%
# ggPlot
ggplot(., aes(x = date, y = erpi)) +
# Geoms:
geom_hline(yintercept = 0, color = "gray") +
geom_line(aes(group = code), color = "#014d64", size = .3) +
geom_line(aes(y = trigger, group = code), linetype = "dashed", color = "#01a2d9", size = .2) +
geom_point(aes(y = cc_plot), shape = 4, size = 2, color = "#00887d") +
geom_text(aes(y = 1.1*cc_plot, label = acc_cc_plot), size = 2.5, color = "#00887d") +
# Facets
facet_wrap(country~., scales = "free_y") +
# Axis
xlab("Time") +
scale_y_continuous(name = "ERPI and Trigger") +
# Theme:
theme_minimal() +
scale_color_economist() +
theme(legend.position = "none")
) %>%
# Plotly
ggplotly(tooltip = c("date", "erpi"))
# Plotly
plot_ly(ierp, type = 'choropleth', locations = ~code,
z = ~acc_cc,
text = ~country,
frame = ~year,
colorscale = "Plasma")
View(ierp)
# Plotly
plot_ly(ierp, type = 'choropleth', locations = ~code,
z = ~acc_cc,
text = ~country,
frame = ~year,
colorscale = "Plasma")
cc <- ierp %>%
filter(year %in% c(year_start:year_end),
month == 12)
# Plotly
plot_ly(cc, type = 'choropleth', locations = ~code,
z = ~acc_cc,
text = ~country,
frame = ~year,
colorscale = "Plasma")
# Plotly
plot_ly(cc, type = 'choropleth', locations = ~code,
z = ~acc_cc,
text = ~country~region,
frame = ~year,
colorscale = "Plasma")
# Plotly
plot_ly(cc, type = 'choropleth', locations = ~code,
z = ~acc_cc,
text = ~country, ~region,
frame = ~year,
colorscale = "Plasma")
# Plotly
plot_ly(cc, type = 'choropleth', locations = ~code,
z = ~acc_cc,
text = ~country,
text = ~region,
frame = ~year,
colorscale = "Plasma")
# Plotly
plot_ly(cc, type = 'choropleth', locations = ~code,
z = ~acc_cc,
text = ~country,
frame = ~year,
colorscale = "Plasma")
# Plotly
plot_ly(cc, type = 'choropleth', locations = ~code,
z = ~acc_cc,
text = ~country,
frame = ~year,
colorscale = "Plasma") %>%
colorbar(title = "Currency Crisis")
# Plotly
plot_ly(cc, type = 'choropleth', locations = ~code,
z = ~acc_cc,
text = ~country,
frame = ~year,
colorscale = "Plasma") %>%
colorbar(title = list("Currency Crisis"))
cc <- ierp %>%
filter(year %in% c(year_start:year_end),
month == 12) %>%
rename(`Currency Crisis` = acc_cc)
# Plotly
plot_ly(cc, type = 'choropleth', locations = ~code,
z = ~acc_cc,
text = ~country,
frame = ~year,
colorscale = "Plasma")
# Plotly
plot_ly(cc, type = 'choropleth', locations = ~code,
z = ~acc_cc,
text = ~country,
frame = ~year,
colorscale = "Plasma")
# Plotly
plot_ly(cc, type = 'choropleth', locations = ~code,
z = ~Currency Crisis,
# Plotly
plot_ly(cc, type = 'choropleth', locations = ~code,
z = ~`Currency Crisis`,
text = ~country,
frame = ~year,
colorscale = "Plasma")
# Plotly
plot_ly(cc, type = 'choropleth', locations = ~code,
z = ~Currency Crisis,
# Plotly
plot_ly(cc, type = 'choropleth', locations = ~code,
z = ~"Currency Crisis",
text = ~country,
frame = ~year,
colorscale = "Plasma")
# Plotly
plot_ly(cc, type = 'choropleth', locations = ~code,
z = ~`Currency Crisis`,
text = ~country,
frame = ~year,
colorscale = "Plasma")
cc <- ierp %>%
filter(year %in% c(year_start:year_end),
month == 12) %>%
rename(Currency_Crisis = acc_cc)
# Plotly
plot_ly(cc, type = 'choropleth', locations = ~code,
z = ~Currency_Crisis,
text = ~country,
frame = ~year,
colorscale = "Plasma")
(ierp %>%
filter(year %in% input$f_year:input$t_year,
code %in% (ierp %>%
filter(year == input$t_year,
month == 12) %>%
filter(code %in% "ARG",
acc_cc != 0) %>%
.$code)
) %>%
# ggPlot
ggplot(., aes(x = date, y = erpi)) +
# Geoms:
geom_hline(yintercept = 0, color = "gray") +
geom_line(aes(group = code), color = "#014d64", size = .3) +
geom_line(aes(y = trigger, group = code), linetype = "dashed", color = "#01a2d9", size = .2) +
geom_point(aes(y = cc_plot), shape = 4, size = 2, color = "#00887d") +
geom_text(aes(y = 1.1*cc_plot, label = acc_cc_plot), size = 2.5, color = "#00887d") +
# Facets
#facet_wrap(country~., scales = "free_y") +
# Axis
xlab("Time") +
scale_y_continuous(name = "ERPI and Trigger") +
# Theme:
theme_minimal() +
scale_color_economist() +
theme(legend.position = "none")
) %>%
# Plotly
ggplotly(tooltip = c("date", "erpi"))
(ierp %>%
filter(year %in% input$f_year:input$t_year,
code %in% (ierp %>%
filter(year == input$t_year,
month == 12) %>%
filter(code %in% "ARG",
acc_cc != 0) %>%
.$code)
) %>%
# ggPlot
ggplot(., aes(x = date, y = erpi)) +
# Geoms:
geom_hline(yintercept = 0, color = "gray") +
geom_line(aes(group = code), color = "#014d64", size = .3) +
geom_line(aes(y = trigger, group = code), linetype = "dashed", color = "#01a2d9", size = .2) +
geom_point(aes(y = cc_plot), shape = 4, size = 2, color = "#00887d") +
geom_text(aes(y = 1.1*cc_plot, label = acc_cc_plot), size = 2.5, color = "#00887d") +
# Facets
#facet_wrap(country~., scales = "free_y") +
# Axis
xlab("Time") +
scale_y_continuous(name = "ERPI and Trigger") +
# Theme:
theme_minimal() +
scale_color_economist() +
theme(legend.position = "none")
) %>%
# Plotly
ggplotly(tooltip = c("date", "erpi"))
inputPanel(
selectInput("f_year", label = "To:",
choices = 1970:2018, selected = 1970),
selectInput("t_year", label = "To:",
choices = 1970:2018, selected = 1970)
)
View(ierp)
x <- ierp %>%
filter(year %in% input$f_year:input$t_year,
code == input$country_target)
unique(ierp$country)
sort(unique(ierp$country))
list(sort(unique(ierp$country)))
ui <- fluidPage(
titlePanel("Currency Crisis Monitor"),
sidebarLayout(
sidebarPanel(
helpText("Create currency crisis charts with
updated information from the IMF."),
selectInput("country",
label = "Choose a Country",
choices = list(sort(unique(ierp$country))),
selected = "Afghanistan"),
sliderInput("range",
label = "Period:",
min = 1970, max = 2018, value = c(1980, 2000))
),
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
)
server <- function(input, output) {
dataInput <- reactive({
x <- ierp %>%
filter(year %in% input$range,
country == input$country)
})
output$plot <- renderPlotly({
# ggPlot
p <- ggplot(x(), aes(x = date, y = erpi)) +
# Geoms:
geom_hline(yintercept = 0, color = "gray") +
geom_line(aes(group = code), color = "#014d64", size = .3) +
geom_line(aes(y = trigger, group = code), linetype = "dashed", color = "#01a2d9", size = .2) +
geom_point(aes(y = cc_plot), shape = 4, size = 2, color = "#00887d") +
geom_text(aes(y = 1.1*cc_plot, label = acc_cc_plot), size = 2.5, color = "#00887d") +
# Axis
xlab("Time") +
scale_y_continuous(name = "ERPI and Trigger") +
# Theme:
theme_minimal() +
scale_color_economist() +
theme(legend.position = "none")
ggplotly(p,
tooltip = c("date", "erpi"))
})
# Generate a summary of the data ----
output$summary <- renderPrint({
summary(x())
})
# Generate an HTML table view of the data ----
output$table <- renderTable({
x()
})
}
########################### Launch App ###########################
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Currency Crisis Monitor"),
sidebarLayout(
sidebarPanel(
helpText("Create currency crisis charts with
updated information from the IMF."),
selectInput("country",
label = "Choose a Country",
choices = list(sort(unique(ierp$country))),
selected = "Afghanistan"),
sliderInput("range",
label = "Period:",
min = 1970, max = 2018, value = c(1980, 2000))
),
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
tabsetPanel(type = "tabs",
tabPanel("Plot", plotOutput("plot")),
tabPanel("Summary", verbatimTextOutput("summary")),
tabPanel("Table", tableOutput("table"))
)
)
)
server <- function(input, output) {
dataInput <- reactive({
x <- ierp %>%
filter(year %in% input$range,
country == input$country)
})
output$plot <- renderPlotly({
# ggPlot
p <- ggplot(x(), aes(x = date, y = erpi)) +
# Geoms:
geom_hline(yintercept = 0, color = "gray") +
geom_line(aes(group = code), color = "#014d64", size = .3) +
geom_line(aes(y = trigger, group = code), linetype = "dashed", color = "#01a2d9", size = .2) +
geom_point(aes(y = cc_plot), shape = 4, size = 2, color = "#00887d") +
geom_text(aes(y = 1.1*cc_plot, label = acc_cc_plot), size = 2.5, color = "#00887d") +
# Axis
xlab("Time") +
scale_y_continuous(name = "ERPI and Trigger") +
# Theme:
theme_minimal() +
scale_color_economist() +
theme(legend.position = "none")
ggplotly(p,
tooltip = c("date", "erpi"))
})
# Generate a summary of the data ----
output$summary <- renderPrint({
summary(x())
})
# Generate an HTML table view of the data ----
output$table <- renderTable({
x()
})
}
unApp("sever")
runApp("sever")
library(shiny)
runApp("cc_app")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor/cc_app")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor/cc_app")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor/cc_app")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor/cc_app")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
vbles <- imf_codes(codelist = "CL_INDICATOR_IFS") %>%
as.data.frame() %>%
filter(description %in% c("Exchange Rates, Domestic Currency per U.S. Dollar, End of Period, Rate",
"Total International Reserves, US Dollars (gold at 35 SDRs per ounce)")) %>%
.$codes %>%
as.character()
ierp <- imf_data(database_id = "IFS" , indicator = vbles , country = "all", start = 1950, end = current_year(), freq = "M") %>%
mutate(year = as.numeric(substr(year_month, 1, 4)),
month = as.numeric(substr(year_month, 6, 7))) %>%
rename(code = iso2c,
e = ENDE_XDC_USD_RATE,
fx = RAFA_G_USD) %>%
select(code, year, month, e, fx)
############################### Selection ##########################################
# Select Year cut
start_count <- 1950
ierp <- ierp %>%
filter(year > start_count) %>%
group_by(code) %>%
mutate(e_sd = rollapply(data = e, width = 12,
FUN = function(x) sd(x, na.rm = TRUE), partial = TRUE, align = "right"),
fx_sd = rollapply(data = fx, width = 12,
FUN = function(x) sd(x, na.rm = TRUE), partial = TRUE, align = "right"),
e_chg = e/lag(e)-1,
fx_chg = fx/lag(fx)-1) %>%
drop_na(e_chg, fx_chg) %>%
mutate(erpi = e_chg - e_sd/fx_sd * fx_chg,
# ERPI and triggers
erpi_mean = rollapply(data = erpi, width = 60,
FUN = function(x) mean(x, na.rm = TRUE), partial = TRUE, align = "right"),
erpi_sd = rollapply(data = erpi, width = 60,
FUN = function(x) sd(x, na.rm = TRUE), partial = TRUE, align = "right"),
trigger = erpi_mean + 3*erpi_sd,
# Currency Crisis
above_trigger = ifelse(erpi > trigger, 1, 0),
acc_above_trigger = rollapply(data = above_trigger, width = 6,
FUN = function(x) sum(x, na.rm = TRUE), partial = TRUE, align = "right"),
cc = ifelse((erpi > 0.1 & lag(acc_above_trigger) == 0 & above_trigger == 1), 1, 0),
cc = ifelse(is.na(cc), 0, cc),
acc_cc = cumsum(cc),
# For plots
cc_plot = ifelse((erpi > 0.1 & lag(acc_above_trigger) == 0 & above_trigger == 1), (max(erpi) + .01), NA),
acc_cc_plot = ifelse(cc == 1, acc_cc, NA)
) %>%
ungroup() %>%
mutate(date = as.Date(as.yearmon(year) + (month-1)/12, frac = 0),
code = countrycode(code, origin = "iso2c", destination = "iso3c"),
country = countrycode(code, origin = "iso3c", destination = "country.name")) %>%
inner_join(select(countrycode::codelist, iso3c, continent, region),
by = c("code" = "iso3c")) %>%
select(code, country, region, continent, date, everything()) %>%
drop_na(code)
View(ierp)
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
str(ierp)
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
# ggPlot
ggplot(p, aes(x = date, y = erpi)) +
# Geoms:
geom_hline(yintercept = 0, color = "gray") +
geom_line(aes(group = code), color = "#014d64", size = .3) +
geom_line(aes(y = trigger, group = code), linetype = "dashed", color = "#01a2d9", size = .2) +
geom_point(aes(y = cc_plot), shape = 4, size = 2, color = "#00887d") +
geom_text(aes(y = 1.1*cc_plot, label = acc_cc_plot), size = 2.5, color = "#00887d") +
# Axis
xlab("Time") +
scale_y_continuous(name = "ERPI and Trigger") +
# Theme:
theme_minimal() +
scale_color_economist() +
theme(legend.position = "none")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
p <- ierp %>%
filter(year %in% 1970:2018,
country == "BRA")
# ggPlot
(ggplot(data = p, aes(x = date, y = erpi)) +
# Geoms:
geom_hline(yintercept = 0, color = "gray") +
geom_line(aes(group = code), color = "#014d64", size = .3) +
geom_line(aes(y = trigger, group = code), linetype = "dashed", color = "#01a2d9", size = .2) +
geom_point(aes(y = cc_plot), shape = 4, size = 2, color = "#00887d") +
geom_text(aes(y = 1.1*cc_plot, label = acc_cc_plot), size = 2.5, color = "#00887d") +
# Axis
xlab("Time") +
scale_y_continuous(name = "ERPI and Trigger") +
# Theme:
theme_minimal() +
scale_color_economist() +
theme(legend.position = "none")) %>%
ggplotly(.,
tooltip = c("date", "erpi"))
p <- ierp %>%
filter(year %in% 1970:2018,
country == "Brazil")
# ggPlot
(ggplot(data = p, aes(x = date, y = erpi)) +
# Geoms:
geom_hline(yintercept = 0, color = "gray") +
geom_line(aes(group = code), color = "#014d64", size = .3) +
geom_line(aes(y = trigger, group = code), linetype = "dashed", color = "#01a2d9", size = .2) +
geom_point(aes(y = cc_plot), shape = 4, size = 2, color = "#00887d") +
geom_text(aes(y = 1.1*cc_plot, label = acc_cc_plot), size = 2.5, color = "#00887d") +
# Axis
xlab("Time") +
scale_y_continuous(name = "ERPI and Trigger") +
# Theme:
theme_minimal() +
scale_color_economist() +
theme(legend.position = "none")) %>%
ggplotly(.,
tooltip = c("date", "erpi"))
# ggPlot
(ggplot(data = p, aes(x = date, y = erpi)) +
# Geoms:
geom_hline(yintercept = 0, color = "gray") +
geom_line(aes(group = code), color = "#014d64", size = .3) +
geom_line(aes(y = trigger, group = code), linetype = "dashed", color = "#01a2d9", size = .2) +
geom_point(aes(y = cc_plot), shape = 4, size = 2, color = "#00887d") +
geom_text(aes(y = 1.1*cc_plot, label = acc_cc_plot), size = 2.5, color = "#00887d") +
# Axis
xlab("Time") +
scale_y_continuous(name = "ERPI and Trigger") +
# Theme:
theme_minimal() +
scale_color_economist() +
theme(legend.position = "none"))# %>%
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
runApp("/home/faf/Dropbox/Git_Projects/Currency Crisis Monitor")
